name: ARC Bridge

on:
  issues:
    types: [opened, edited]

jobs:
  onboard_repos:
    runs-on: ubuntu-latest
    steps:
      - name: Onboard Repositories
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            // Initialize Variables
            const botUser = 'jaron-bauers';
            const org = 'jaron-bauers';
            const repo = 'inventory-2';
            const baseBranch = 'main';
            // Could play with filePaths more once arc-onprem becomes available
            const filePaths = ['runner-groups/1source-arc-green.yml', 'runner-groups/1source-arc.yml'];
            const newBranchName = `user/arc-bridge/add-repo-to-arc-group-${context.issue.number}`;

            // Validate all input repos are registered in inventory
            async function validateRepos(inputString) {
              // Initialize variables
              let invalidRepos = '';
              
              // Make user input an array
              const repoList = inputString.match(/[^\s,]+/g);
              let validatedRepoList = repoList;

              console.log('repo list:', repoList);

              // Check if each repo exists in inventory
              for (const repo of repoList) {
                // Get the name of the repo
                const repoName = repo.split('/')[1];
                console.log(repoName);

                // Get repo's repos.yml inventory path
                const path = `organizations/${repo.split('/')[0]}/repos/${repoName.replace(/\.[^.]+$/, '').replace(/\./g, '/')}/repos.yml`;

                // Try to retrieve inventory repo content
                try {
                  // Get repos.yml file content
                  const { data: file } = await github.rest.repos.getContent({
                    owner: "jaron-bauers",
                    repo: "inventory-2",
                    path
                  });

                  // Decode the Base64 encoded content
                  const fileContent = Buffer.from(file.content, 'base64').toString('utf-8');
              
                  // Check if the repo.yml file contains the repo's name field
                  const nameField = new RegExp(`\\bname: ${repoName}\\b`);
                } catch (error) {
                  console.log(`invalid repo detected: ${repo}`);
                  
                  // Add invalid repo to reject list
                  invalidRepos += `- ${repo}\n`;
                  
                  // Remove repo from repoList
                  const invalidIndex = validatedRepoList.indexOf(repo)
                  validatedRepoList.splice(invalidIndex, 1)
                }
              }
              console.log(validatedRepoList);
              // Check for any found invalid repos
              if(invalidRepos) {
                // Inform user of invalid repos
                github.rest.issues.createComment({
                  owner: context.payload.repository.owner.login,
                  repo: context.payload.repository.name,
                  issue_number: context.issue.number,
                  body: `**ERROR: Unable to validate some repo(s)!**\nPlease check for any spelling errors and validate that the repo(s) below are currently [registered in Inventory](https://github.com/intel-innersource/inventory?tab=readme-ov-file#repos):\n ${invalidRepos}`,
                });
              }
              return validatedRepoList;
            }

            const repoList = await validateRepos(context.payload.issue.body);

            console.log(repoList);

            if(!repoList) {
              // Close the Issue
              github.rest.issues.update({
                owner: context.payload.repository.owner.login,
                repo: context.payload.repository.name,
                issue_number: context.issue.number,
                state: 'closed',
              });

              // return
              return;
            }
